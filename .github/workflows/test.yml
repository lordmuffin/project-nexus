# Comprehensive CI/CD Pipeline for Project Nexus
name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Mobile App Tests
  test-mobile:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/mobile
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/mobile/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: apps/mobile/node_modules
          key: ${{ env.CACHE_VERSION }}-mobile-${{ runner.os }}-node-${{ hashFiles('apps/mobile/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-mobile-${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage
          fail_ci_if_error: false

  # Web App Tests
  test-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package.json

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage
          fail_ci_if_error: false

  # Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: packages/backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./packages/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Integration Tests
  test-integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL=postgresql://testuser:testpass@postgres-test:5432/testdb
          TRANSCRIPTION_SERVICE_URL=http://transcription-test:8000
          EOF

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit test-backend-integration
          exit_code=$?
          docker-compose -f docker-compose.test.yml down
          exit $exit_code

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: packages/backend/coverage/

  # E2E Tests with Maestro
  test-e2e:
    runs-on: ubuntu-latest
    needs: [test-mobile, test-web, test-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Maestro CLI
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Setup test environment
        run: |
          # Start minimal services for E2E testing
          docker-compose -f docker-compose.test.yml up -d mobile-app-test
          
          # Wait for services to be ready
          timeout 120s bash -c 'until curl -f http://localhost:19006; do sleep 2; done'

      - name: Run E2E tests
        run: |
          maestro test apps/mobile/.maestro/
        timeout-minutes: 10

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            apps/mobile/.maestro/results/
            apps/mobile/.maestro/screenshots/

  # Build Verification
  build-verification:
    runs-on: ubuntu-latest
    needs: [test-mobile, test-web, test-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@8.0.0

      - name: Install workspace dependencies
        run: pnpm install

      - name: Build all packages
        run: pnpm run build

      - name: Verify Docker builds
        run: |
          docker-compose build frontend backend transcription

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit npm dependencies
        run: |
          cd apps/mobile && npm audit --audit-level=high
          cd ../../apps/web && npm audit --audit-level=high
          cd ../../packages/backend && npm audit --audit-level=high

  # Performance Tests
  performance-test:
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres-test backend-test
          sleep 30

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          # Simple API performance test
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';
          
          export const options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '30s', target: 20 },
              { duration: '30s', target: 0 },
            ],
          };
          
          export default function () {
            const response = http.get('http://localhost:3001/api/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
          }
          EOF
          
          k6 run performance-test.js

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/mobile && npm ci
          cd ../web && npm install
          cd ../../packages/backend && npm ci

      - name: Run ESLint
        run: |
          cd apps/mobile && npm run lint -- --format json --output-file eslint-results.json || true
          cd ../web && npx eslint src --format json --output-file eslint-results.json || true
          cd ../../packages/backend && npm run lint -- --format json --output-file eslint-results.json || true

      - name: Upload ESLint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: eslint-results
          path: |
            apps/mobile/eslint-results.json
            apps/web/eslint-results.json
            packages/backend/eslint-results.json

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-mobile, test-web, test-backend, test-integration, test-e2e, build-verification]
    if: always()
    
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile Tests | ${{ needs.test-mobile.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Web Tests | ${{ needs.test-web.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test-integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY