services:
  # Frontend React application
  frontend:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_BACKEND_URL=http://localhost:3001
      - PORT=3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./apps/web:/app:cached
      - /app/node_modules
    networks:
      - nexus-network
    restart: unless-stopped
    command: sh -c "npm install --legacy-peer-deps && FAST_REFRESH=false npm start"
    depends_on:
      - backend

  # Backend Node.js service (Development mode - volume mounted)
  backend:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
      - DATABASE_URL=postgresql://nexus:nexus_password@database:5432/nexus
      - OLLAMA_URL=http://ollama:11434
      - TRANSCRIPTION_SERVICE_URL=http://transcription:8000
    volumes:
      - ./packages/backend:/app
      - /app/node_modules
      - ./data:/app/data
      - ./uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
      ollama:
        condition: service_started
      transcription:
        condition: service_healthy
    networks:
      - nexus-network
    restart: unless-stopped
    command: sh -c "apk add --no-cache python3 make g++ curl && npm install && npm run dev"

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: nexus
      POSTGRES_USER: nexus
      POSTGRES_PASSWORD: nexus_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - nexus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus -d nexus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - nexus-network
    restart: unless-stopped
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Whisper Transcription Service
  transcription:
    build:
      context: ./packages/transcription-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - ./uploads:/app/uploads
      - transcription-models:/app/models
    networks:
      - nexus-network
    restart: unless-stopped
    # Uncomment for GPU support (NVIDIA)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  # Uncomment if you want to add Redis for caching transcription jobs
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - nexus-network
  #   restart: unless-stopped

volumes:
  transcription-models:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  # redis_data:
  #   driver: local

networks:
  nexus-network:
    driver: bridge