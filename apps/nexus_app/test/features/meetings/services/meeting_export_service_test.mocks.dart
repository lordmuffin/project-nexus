// Mocks generated by Mockito 5.4.6 from annotations
// in nexus_app/test/features/meetings/services/meeting_export_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nexus_app/core/database/database.dart' as _i4;
import 'package:nexus_app/core/repositories/meeting_repository.dart' as _i2;
import 'package:nexus_app/features/meetings/widgets/meeting_search_bar.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MeetingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeetingRepository extends _i1.Mock implements _i2.MeetingRepository {
  MockMeetingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> createMeeting({
    required String? title,
    DateTime? startTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMeeting,
          [],
          {
            #title: title,
            #startTime: startTime,
          },
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Stream<List<_i4.Meeting>> watchAllMeetings() => (super.noSuchMethod(
        Invocation.method(
          #watchAllMeetings,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Meeting>>.empty(),
      ) as _i3.Stream<List<_i4.Meeting>>);

  @override
  _i3.Future<List<_i4.Meeting>> getAllMeetings() => (super.noSuchMethod(
        Invocation.method(
          #getAllMeetings,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Meeting>>.value(<_i4.Meeting>[]),
      ) as _i3.Future<List<_i4.Meeting>>);

  @override
  _i3.Future<_i4.Meeting?> getMeetingById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMeetingById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Meeting?>.value(),
      ) as _i3.Future<_i4.Meeting?>);

  @override
  _i3.Future<bool> updateMeeting(_i4.Meeting? meeting) => (super.noSuchMethod(
        Invocation.method(
          #updateMeeting,
          [meeting],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> updateTranscript(
    int? meetingId,
    String? transcript,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTranscript,
          [
            meetingId,
            transcript,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateSummary(
    int? meetingId,
    String? summary,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSummary,
          [
            meetingId,
            summary,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateActionItems(
    int? meetingId,
    String? actionItems,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateActionItems,
          [
            meetingId,
            actionItems,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateAudioPath(
    int? meetingId,
    String? audioPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAudioPath,
          [
            meetingId,
            audioPath,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> endMeeting(int? meetingId) => (super.noSuchMethod(
        Invocation.method(
          #endMeeting,
          [meetingId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMeeting(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMeeting,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Meeting>> searchMeetings(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMeetings,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.Meeting>>.value(<_i4.Meeting>[]),
      ) as _i3.Future<List<_i4.Meeting>>);

  @override
  _i3.Stream<List<_i4.Meeting>> watchMeetingsWithFilters({
    String? searchQuery,
    _i5.MeetingSearchFilters? filters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchMeetingsWithFilters,
          [],
          {
            #searchQuery: searchQuery,
            #filters: filters,
          },
        ),
        returnValue: _i3.Stream<List<_i4.Meeting>>.empty(),
      ) as _i3.Stream<List<_i4.Meeting>>);

  @override
  _i3.Future<List<_i4.Meeting>> searchAndFilterMeetings({
    String? searchQuery,
    _i5.MeetingSearchFilters? filters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchAndFilterMeetings,
          [],
          {
            #searchQuery: searchQuery,
            #filters: filters,
          },
        ),
        returnValue: _i3.Future<List<_i4.Meeting>>.value(<_i4.Meeting>[]),
      ) as _i3.Future<List<_i4.Meeting>>);

  @override
  _i3.Future<List<String>> getAllTags() => (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<void> updateTags(
    int? meetingId,
    List<String>? tags,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTags,
          [
            meetingId,
            tags,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<String> parseTags(String? tagsJson) => (super.noSuchMethod(
        Invocation.method(
          #parseTags,
          [tagsJson],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i3.Future<void> deleteAllMeetings() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllMeetings,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> getMeetingCount() => (super.noSuchMethod(
        Invocation.method(
          #getMeetingCount,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<Map<String, dynamic>> getMeetingStats() => (super.noSuchMethod(
        Invocation.method(
          #getMeetingStats,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}
